plugins {
    id 'java-library'
    id 'org.springframework.boot' version '3.2.3' apply(false)
    id 'io.spring.dependency-management' version '1.1.4' apply(false)
}

group = 'com.sample'
version = '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

repositories {
    mavenCentral()
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    ext {
        set('springCloudVersion', "2023.0.0")
        set('queryDslVersion', '5.0.0')
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation(enforcedPlatform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"))

        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-log4j2'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        // Map Struct
        implementation 'org.mapstruct:mapstruct:1.5.3.Final'
        annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
        annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

        implementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.assertj:assertj-core:3.26.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    }

    configurations {
        configureEach {
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        }
    }

    tasks.named('test', Test) {
        useJUnitPlatform()
    }
}

project(':core') {
    dependencies {
    }
}

project(':domain-mysql') {
    dependencies {
        api 'org.springframework.boot:spring-boot-starter-data-jpa'

        // QueryDSL
        implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
        annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"

        implementation 'com.zaxxer:HikariCP:5.1.0'
        runtimeOnly 'com.mysql:mysql-connector-j'
    }
}

project(':domain-mysql-reactive') {
    dependencies {
        api 'org.springframework.boot:spring-boot-starter-data-r2dbc'
        api 'io.projectreactor:reactor-test:3.2.3.RELEASE'
        implementation 'io.netty:netty-resolver-dns-native-macos:4.1.68.Final:osx-aarch_64'

        runtimeOnly 'io.asyncer:r2dbc-mysql'
        runtimeOnly 'com.mysql:mysql-connector-j'
    }
}

project(':domain-mongodb') {
    dependencies {
        api 'org.springframework.boot:spring-boot-starter-data-mongodb'
    }
}

project(':domain-mongodb-reactive') {
    dependencies {
        api 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    }
}

project(':webmvc-api') {

    dependencies {
        implementation project(':domain-mysql')
        implementation project(':core')
        implementation 'org.springframework.boot:spring-boot-starter-web'

        implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    }

    bootJar {
        archiveBaseName = 'webmvc-api'
        archiveFileName = 'webmvc-api.jar'
        archiveVersion = '0.0.1'
    }
}

project(':webflux-api') {
    dependencies {
        implementation project(':domain-mysql-reactive')
        implementation project(':domain-mongodb-reactive')
        implementation project(':core')
        implementation 'org.springframework.boot:spring-boot-starter-webflux'

        implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.5.0'
    }

    bootJar {
        archiveBaseName = 'webflux-api'
        archiveFileName = 'webflux-api.jar'
        archiveVersion = '0.0.1'
    }
}